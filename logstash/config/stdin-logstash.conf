input {

   stdin {
      type => "apache"
   }

}

filter {

  if [type] == "apache" {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG}" 
      }
      add_field => [ "server", "www-gitlab" ]
    }

    geoip {
      source => "clientip"
      target => "geoip"
      database => "/etc/logstash/conf.d/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]     
    }

    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }

    mutate {
      # 'coords' will be kept, 'tmplat' is temporary.
      # Both of these new fields are strings.
      add_field => [ "coords", "%{[geoip][longitude]}",
                     "tmplat", "%{[geoip][latitude]}" ]
    }

    mutate {
            # Merge 'tmplat' into 'coords'
            merge => [ "coords", "tmplat" ]
    }

    mutate {
      # Convert our new array of strings back to float
      convert => [ "coords", "float" ]
            
      # Delete our temporary latitude field
      remove => [ "tmplat" ]
    }
        
    mutate {
      ## rename coords to live inside geoip
      rename => [ "coords", "[geoip][coords]"]
    }

  }

  if [type] == "linux-syslog" {

    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]       
    }

    syslog_pri { }

    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    } 

    geoip {
      source => "clientip"
    }

  }

}

output {

  stdout { codec => rubydebug }

}

